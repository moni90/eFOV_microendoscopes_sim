%%
% path with all functions
addpath(genpath('./utilities/'));

%% ESTIMATE ROI SIZE AND DENSITY FROM EXPERIMENTAL DATA

% px_um_path. Path to the file with the pixel/um conversion corrected considering the FOV curvature 
px_um_path = './pixel_size.mat';
% save_path. Path to save data
save_path_ROIs = './ROI_size.mat';

% %The following part of code was used to estimate the size and density of neurons in our experimental data 
% %Use experimental dataset to estimate roi size and density in FOV
% data_path = './data/simulations_fit/'; %Path to example TSeries to estimate ROI size and density
% um_per_px = [2.139; 2.139];% um per pixels in X and Y axis for experimental data
% main_estimate_rois_size_and_density_RULER(um_per_px, px_um_path, data_path, save_path_ROIs);
% close all;

% load roi size and density in FOV
load(px_um_path);
load(save_path_ROIs);
%% ESTIMATE NOISE IN TSERIES

% save_path. Path to save data
save_path_noise = './pixels_noise.mat';

% %The following part of code was used to estimate FOV noise in our experimental data 
% %FOV noise is composed by dark noise and shot noise.
% %Shot noise is different for background and ROI pixels.
% main_estimate_px_noise(data_path, save_path_noise); 
% close all;

%load dark noise, shot noise and so on
load(save_path_noise);
%% SET PATH AND FILENAMES OF ALL THE SIMULATIONS

%set path to save data (will contain a folder for each simulated TSeries)
save_path = './simulated_TS/';
%set folder names to store each simulation
save_name_TSeries_list = {'20201005_sim_TS001'};

%create savepath and filenames
save_path_TSeries_list = cell(1,length(save_name_TSeries_list));
sample_filename = cell(1,length(save_name_TSeries_list));
for id_TS = 1:length(save_name_TSeries_list)
    if ispc
        save_path_TSeries_list{id_TS} = [save_path save_name_TSeries_list{id_TS} '\' ];
    elseif isunix
        save_path_TSeries_list{id_TS} = [save_path save_name_TSeries_list{id_TS} '/' ];
    end
    if ~exist(save_path_TSeries_list{id_TS})
        mkdir(save_path_TSeries_list{id_TS});
    end
    sample_filename{id_TS} = [save_path_TSeries_list{id_TS} save_name_TSeries_list{id_TS} '_spatial_sample.mat'];
end

%% INITIALIZE PARAMS FOR SPATIAL SAMPLE SIMULATION
x_um = 500; %width FOV in um (INTEGER)
y_um = 500; %heigth FOV in um (INTEGER)
z_um = 80; %depth sample in um (INTEGER)
sample_size = [x_um y_um z_um];
um_per_vx = 0.5; %um per sample voxel
neuron_density = 83100/(10^9); %neurons/(um^3)
nucleus_width = 4; %width nucleus in um
nucleus_var = 2; %var width nucleus in um

%% INITIALIZE PARAMS FOR IMAGING SIMULATION
% set micron per pixel
um_px_FOV = 2.5; %FOV spatial resolution
analyses_path = './';
%intensity mask save path
path_intensity_mask = fullfile(analyses_path,'intensity_mask');
%path with magnification calibrations (obtained from experimental data)
magn_factor_path_LENS = fullfile(analyses_path,'ruler_FOV','LENS_pixel_size.mat');
magn_factor_path_noLENS = fullfile(analyses_path,'ruler_FOV','noLENS_pixel_size.mat');
%path with PSF size estimate (obtained from experimental data)
PSF_size_path_LENS = fullfile(analyses_path,'psf_estimate','eFOV_fit_pol.mat');
PSF_size_path_noLENS = fullfile(analyses_path,'psf_estimate','aberr_fit_pol.mat');

%% ESTIMATE OR IMPORT INTENSITY MASK AND PSF DISTRIBUTION
% Intensity masks and FOV curvature are estimated from data
% Path to data for curvature and PSF estimate (these data are available upon reasonable request)
% data_path_films_LENS = '/endoscopes_project/data/fluorescent films per simulazione/500Lens/';
% data_path_films_noLENS = '/endoscopes_project/data/fluorescent films per simulazione/500NoLens/';
% intensity_profile_LENS = '/endoscopes_project/analyses/Endoscopes Intensity Profiles/profile_500_4.07_lens.txt';
% intensity_profile_noLENS = '/endoscopes_project/analyses/Endoscopes Intensity Profiles/profile_500_4.07_Nolens.txt';

path_intensity_mask_LENS = [path_intensity_mask '/profile_LENS_x'...
    num2str(x_um) '_y' num2str(y_um) '_z' num2str(z_um) '.mat'];
path_intensity_mask_noLENS = [path_intensity_mask '/profile_noLENS_x'...
    num2str(x_um) '_y' num2str(y_um) '_z' num2str(z_um) '.mat'];

if ~exist(path_intensity_mask_LENS) || ~exist(path_intensity_mask_noLENS)
    [path_intensity_mask_LENS, path_intensity_mask_noLENS] = intensity_convolution_mask(sample_size,um_per_vx,path_intensity_mask,data_path_films_LENS,data_path_films_noLENS);
end

%path to PSF mapping
path_PSF_LENS = './imaging_ellipsoids/imaging_pixels_LENS.mat';
if ~exist(path_PSF_LENS)
    build_psf_distribution_LENS(sample_size,um_per_vx,um_px_FOV,...
        path_intensity_mask_LENS,magn_factor_path_LENS,PSF_size_path_LENS,path_PSF_LENS);
end
path_PSF_noLENS = './imaging_ellipsoids/imaging_pixels_noLENS.mat';
if ~exist(path_PSF_noLENS)
    build_psf_distribution_noLENS(sample_size,um_per_vx,um_px_FOV,...
        path_intensity_mask_noLENS,magn_factor_path_noLENS,PSF_size_path_noLENS,path_PSF_noLENS);
end

%% INITIALIZE PARAMS FOR SPIKING AND CALCIUM ACTIVITY
% set timing resolution for simulations
dt_imaging = 5; %imaging rate in Hz
dt_spikes = 1000; %simulation rate in Hz
T = 20; %duration of simulation in sec
% spiking rate
spike_rate = 0.3; %firing rate in Hz
%calcium simulation
method_ca = 2; %1 = exponential decay (Deneux,2016) 2 = autoregressive model (Friedrich, 2017)
params_ca.p = 1;%1;%2;
params_ca.gamma = [0.7];%[0.95];%[-0.712 1.7 ];%[0.1 0.8];
%fluorescence simulation
method_fluo = 3; %1 = linear (Friedrich, 2017), 2 = polynomial (Deneux,2016), 3 = supralinear and Hill saturation (Friedrich, 2017)
params_fluo.b = 0;
params_fluo.a = 1500; 
params_fluo.sigma = 0.05;
params_fluo.n = 1;
params_fluo.k = 1;

segment_CaImAn.overlap_thr = 0.8;%0.75; %merge ROIs whose overlapping area is larger than this percentage of total area of at least one roi

%% GENERATE SIMULATED TSERIES
for id_TS = 1:length(save_name_TSeries_list)
    disp(['simulation TS ', num2str(id_TS) ' of ' num2str(length(save_name_TSeries_list))]);
    % generate spatial sample
    radius = mean(roi_radius) + randn(1,1)*std(roi_radius);%mean(mean_radius) + randn(1,1)*std(mean_radius);
    while radius<8
        radius = mean(roi_radius) + randn(1,1)*std(roi_radius);
    end
    var_within = mean(std_radius);

    [n_rois, neurons_id, sample_filename_temp] =...
        generate_spatial_sample(sample_size, um_per_vx, neuron_density, radius, var_within, nucleus_width, nucleus_var, sample_filename{id_TS});
    
    % simulate neural activity
    [time_spikes, S, time_imaging, ca, fluo] =...
        generate_neural_activity(dt_imaging, dt_spikes, T, spike_rate,...
        method_ca, params_ca,method_fluo,params_fluo,n_rois,...
        save_name_TSeries_list{id_TS}, save_path_TSeries_list{id_TS});
    
    %%generate temporal activity and generate TIFF TSeries
    %load large arrays directly in the function. Should use less RAM
    %LENS corrected
    [save_name_TSeries, save_path_TSeries] = generate_tiff_TSeries_endoscope(...
        neurons_id, path_intensity_mask_LENS,...
        noise_FOV_params,noise_rois_params,coeff_linear_mean_std_FOV,...
        coeff_linear_mean_std_rois,coeff_linear_mean_std_dark,GMModel,...
        path_PSF_LENS,save_name_TSeries_list{id_TS}, save_path_TSeries_list{id_TS}, 1 );
    %without LENS
    [save_name_TSeries, save_path_TSeries] = generate_tiff_TSeries_endoscope(...
        neurons_id, path_intensity_mask_noLENS,...
        noise_FOV_params,noise_rois_params,coeff_linear_mean_std_FOV,...
        coeff_linear_mean_std_rois,coeff_linear_mean_std_dark,GMModel,...
        path_PSF_noLENS, save_name_TSeries_list{id_TS}, save_path_TSeries_list{id_TS},0 );
    
    %%manual segmentation
    findROIs_extractFluo_SNR(save_path_TSeries_list{id_TS},segment_manual.code_path,segment_manual.min_n_px, segment_manual.snr_thr_LENS, segment_manual.snr_thr_noLENS, segment_manual.overlap_thr);
    %CaImAn segmentation
    findROIs_extractFluo_CaImAn(save_path_TSeries_list{id_TS}, segment_CaImAn.code_path, segment_CaImAn.snr_thr_LENS, segment_CaImAn.snr_thr_noLENS, segment_CaImAn.overlap_thr, segment_CaImAn.min_n_px);


end

%% INITIALIZE PARAMS FOR 'MANUAL' AND CAIMAN SEGMENTATION
segment_manual.method = 'manual';
segment_manual.code_path = '';%path to CaImAn installation; TO BE ADDED BY USER
segment_manual.snr_thr = 20;%[5 10 15 20 25 30]; %keep only ROIs with SNR larger than this threshold
segment_manual.snr_thr_LENS = 20;%[5 10 15 20 25 30];; %keep only ROIs with SNR larger than this threshold
segment_manual.snr_thr_noLENS = 20;%[5 10 15 20 25 30]; %keep only ROIs with SNR larger than this threshold
segment_manual.min_n_px = 8; %keep only ROIs with num_pixels larger than this threshold
segment_manual.overlap_thr = 0.8;%0.75; %merge ROIs whose overlapping area is larger than this percentage of total area of at least one roi
 
segment_CaImAn.method = 'CaImAn';
segment_CaImAn.code_path = '';%path to CaImAn installation; TO BE ADDED BY USER
segment_CaImAn.snr_thr_LENS = 1;%[0.25 0.5 1 1.5 2]; %keep only ROIs with SNR larger than this threshold
segment_CaImAn.snr_thr_noLENS = 1;%[0.25 0.5 1 1.5 2]; %keep only ROIs with SNR larger than this threshold
segment_CaImAn.min_n_px = 8; %keep only ROIs with num_pixels larger than this threshold

%% SEGMENT SIMULATED TSERIES
for id_TS = 1:length(save_name_TSeries_list)
    disp(['SEGMENTATION. TS ', num2str(id_TS) ' of ' num2str(length(save_name_TSeries_list))]);

    %%manual segmentation
    findROIs_extractFluo_SNR(save_path_TSeries_list{id_TS},segment_manual.code_path,segment_manual.min_n_px, segment_manual.snr_thr_LENS, segment_manual.snr_thr_noLENS, segment_manual.overlap_thr);
    %CaImAn segmentation
    findROIs_extractFluo_CaImAn(save_path_TSeries_list{id_TS}, segment_CaImAn.code_path, segment_CaImAn.snr_thr_LENS, segment_CaImAn.snr_thr_noLENS, segment_CaImAn.overlap_thr, segment_CaImAn.min_n_px);
end

%% PERFORM NMF
nmf_code_path = '';%path to PopulationSpikeTrainFactorization; TO BE ADDED BY USER
use_df = 0; % 0: perform nmf on deconvolved activity; 1: perform nmf on normalized fluorescence
mod_max = 300; %maximum NMF to consider (if nROIs<mod_max, then mod_max = nROI)
var_step = 10:10:100; %variance steps
draw_figures = 0;

for id_TS = 1:length(save_name_TSeries_list)
    disp(['NMF. TS ', num2str(id_TS) ' of ' num2str(length(save_name_TSeries_list))]);
    
    %%manual segmentation
    [var_explained_manual_LENS, var_explained_manual_noLENS,n_rois_var_manual_LENS, n_rois_var_manual_noLENS] = ...
        nmf_analysis_sim(save_path_TSeries_list{id_TS}, nmf_code_path, segment_manual, use_df, mod_max, var_step, draw_figures);
    %%CaImAn segmentation
    [var_explained_CaImAn_LENS, var_explained_CaImAn_noLENS,n_rois_var_CaImAn_LENS, n_rois_var_CaImAn_noLENS] = ...
        nmf_analysis_sim(save_path_TSeries_list{id_TS}, nmf_code_path, segment_CaImAn, use_df, mod_max, var_step, draw_figures);
end

%% COMPUTE PAIRWISE CORRELATIONS AS A FUNCTION OF DISTANCE FROM CENTER
use_df = 1; % 0: deconvolved activity; 1: normalized fluorescence
max_dist = 20; % max distance to consider two ROIs as near
max_dist_l = 60; % min distance to consider two ROIs as far

for id_TS = 1:length(save_name_TSeries_list)
    disp(['PAIRWISE CORR. TS ', num2str(id_TS) ' of ' num2str(length(save_name_TSeries_list))]);
    
    %%groundtruth
    [SNR_groundtruth, dist_groundtruth, corr_groundtruth, dist_groundtruth_l, ...
        corr_groundtruth_l] = ...
        compute_SNR_pairwise_corr_groundtruth(TSpath, um_px_FOV,...
        use_df, max_dist, max_dist_l, magn_factor_path_LENS, magn_factor_path_noLENS);
    %%manual segmentation
    [SNR_manual_LENS, SNR_manual_noLENS, dist_manual_LENS, corr_manual_LENS, dist_manual_LENS_l, ...
        corr_manual_LENS_l, dist_manual_noLENS, corr_manual_noLENS, dist_manual_noLENS_l, corr_manual_noLENS_l] = ...
        compute_SNR_pairwise_corr_ROIs(save_path_TSeries_list{id_TS}, segment_manual, um_px_FOV,...
        use_df, max_dist, max_dist_l, magn_factor_path_LENS, magn_factor_path_noLENS);
    %%CaImAn segmentation
    [SNR_CaImAn_LENS, SNR_CaImAn_noLENS, dist_CaImAn_LENS, corr_CaImAn_LENS, dist_CaImAn_LENS_l, ...
        corr_CaImAn_LENS_l, dist_CaImAn_noLENS, corr_CaImAn_noLENS, dist_CaImAn_noLENS_l, corr_CaImAn_noLENS_l] = ...
        compute_SNR_pairwise_corr_ROIs(save_path_TSeries_list{id_TS}, segment_CaImAn, um_px_FOV,...
        use_df, max_dist, max_dist_l, magn_factor_path_LENS, magn_factor_path_noLENS);
end